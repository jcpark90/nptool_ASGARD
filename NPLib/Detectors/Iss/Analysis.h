#ifndef Analysis_h 
#define Analysis_h
/*****************************************************************************
 * Copyright (C) 2009-2019    this file is part of the NPTool Project        *
 *                                                                           *
 * For the licensing terms see $NPTOOL/Licence/NPTool_Licence                *
 * For the list of contributors see $NPTOOL/Licence/Contributors             *
 *****************************************************************************/

/*****************************************************************************
 * Original Author: M Labiche  contact address: marc.labiche@stfc.ac.uk      *
 *                                                                           *
 * Creation Date  : july 2019                                                *
 * Last update    :                                                          *
 *---------------------------------------------------------------------------*
 * Decription:                                                               *
 * Class describing the property of an Analysis object                       *
 *                                                                           *
 *---------------------------------------------------------------------------*
 * Comment:                                                                  *
 *                                                                           *
 *                                                                           *
 *****************************************************************************/
#include"NPVAnalysis.h"
#include"NPEnergyLoss.h"
#include"NPReaction.h"
#include"RootOutput.h"
#include"RootInput.h"

#include "TInitialConditions.h"
#include "TInteractionCoordinates.h"
#include <TRandom3.h>
#include <TVector3.h>
#include <TMath.h>

#include "TIssPhysics.h"
//#include"TAnnularS1Physics.h"

class Analysis: public NPL::VAnalysis{
  public:
    Analysis();
    ~Analysis();

  public: 
    void Init();
    void TreatEvent();
    void End();

  void InitOutputBranch();
  void InitInputBranch();
  void ReInitValue();
  static NPL::VAnalysis* Construct();

  //void ZonBeamAxis (TVector3 A, double E, int q, double M, double B, double*, double*, double*) ;
  void ZonBeamAxis (TVector3 A, double E, int q, double M, double B, double*, double*, double*, int*) ;

   void MaxDAxis (double E, int q, double M, double B, double*) ;
 
  private:
  double Ex, QValue, QValueR, X_meas, Y_meas, Z_meas, Z_extrap, Daxis;
  double ISS_ELab;  // initial energy of particle detected in ISS, after target nrj loss correction. 
  double ThetaLab;
  double ThetaCM;

  double ISS_EDep;  // energy deposited in ISS
  double ISS_Time;
  int ISS_DetId;

  double S1_EDep;
  double S1_Time;
  int S1_RingId, S1_SectId;
  
  int Nb_Iter;
  NPL::Reaction* myReaction;

  double BeamEnergy;
  double parA,parB,parC;



  //	Energy loss table: the G4Table are generated by the simulation
  EnergyLoss LightCD2;
  //EnergyLoss LightAl;
  //EnergyLoss LightSi;
  EnergyLoss BeamCD2;
  TVector3 BeamImpact;
  
  double TargetThickness ;
  // Beam Energy
  double OriginalBeamEnergy ; // AMEV
  // Light ejectile Charge and Mass
  int pCharge; 
  double pMass1, pMass2, pMass3, pMass4;

  // Nominal magnetic field
  double Bfield; 
                                                           // intermediate variable
  TRandom3 *Rand ;
  int DetectorNumber  ;
  double ThetaNormalTarget;

  
  double Energy, Energy_S1 ;

  double ThetaIssSurface ;
  double X_Iss ; 
  double Y_Iss ;
  double Z_Iss  ;
  double Si_E_Iss ;
  double E_Iss ;
  double Si_X_Iss ;
  double Si_Y_Iss ;

  double S1ELab, S1Time;
  double E_S1,Time_S1;
  int Ring_S1,Sector_S1;
  int S1Ring, S1Sector;

  TInitialConditions* myInit ;
  TInteractionCoordinates* myIntCoord ;
  TIssPhysics* Iss;
//  TAnnularS1Physics* S1;
};
#endif
