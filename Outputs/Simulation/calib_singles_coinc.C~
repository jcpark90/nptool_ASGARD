TChain* tfatima;
TChain* tkhala;

TChain* teu;
#include <TTreeReader.h>
#include <TTreeReaderValue.h>
#include <TTreeReaderArray.h>
#include "TFatimaData.h"

const int ENERGIES[24] = {100, 200, 300, 400, 500,
			  600, 700, 800, 900, 1000,
			  1100, 1200, 1300, 1400, 1500,
			  1600, 1700, 1800, 1900, 2000,
			  2500, 3000, 3500, 4000};
const int dENERGIES[24] = {20, 20, 25, 30, 35,
			   40, 45, 50, 50, 50,
			   50, 50, 50, 50, 50,
			   50, 50, 50, 50, 50,
			   50, 50, 50, 50};

const int REBIN[24] = {1, 1, 2, 2, 2,
		       2, 2, 2, 2, 5,
		       5, 5, 5, 5, 5,
		       5, 5, 5, 5, 5,
		       10, 10, 10, 10};

const double E152EU_122[5] = {244,  867, 964, 1112, 1408};
const double I152EU_122[5] = {7.5,  4.2, 14.5, 13.6, 21};
double n152EU_122[5] = {260, 40, 100, 80, 80}; // when rebinned to 5
double b152EU_122[5] = {60,  40, 100, 80, 80}; // when rebinned to 5
TF1* f152eu_122[5];

const double E152EU_344[3] = {411, 778, 1299};
const double dE152EU_344[3] = {60, 70, 100};

const double I152EU_344[3] = {2.234, 12.942,  1.623};
double n152EU_344[3] = {80, 150, 10}; // when rebinned to 5
double b152EU_344[3] = {20, 5, 0}; // when rebinned to 5
TF1* f152eu_344[3];

TH1D* hfatima[24];
TH1D* hkhala[24];
TH1D* hidaten[24];

TH1D* h152eu;
TH1D* h152eu_gg_122;
TH1D* h152eu_gg_344;


TF1* ffatima[24];
TF1* fkhala[24];
TF1* fidaten[24];

TGraphErrors* gfatima;
TGraphErrors* gkhala;
TGraphErrors* gidaten;
TGraphErrors* g152eu_122;
TGraphErrors* g152eu_344;

TTreeReader fReader;



const double EGATE1 = 0.122;
const double EWIND1 = 0.020; // 20 keV

const double EGATE2 = 0.344;
const double EWIND2 = 0.030; // 30 keV

void calib_singles_coinc(){
  gStyle->SetOptStat(0);

  teu = new TChain("SimulatedTree");
  teu->Add("idaten_152Eu.root");
  fReader.SetTree(teu);
  
  TTreeReaderValue<TFatimaData> Fatima = {fReader, "Fatima"};
  TTreeReaderValue<TKhalaData> Khala = {fReader, "Khala"};
  TCanvas* cc = new TCanvas("cc", "cc", 1800, 600);
  cc->Divide(3,1);
  tfatima = new TChain("SimulatedTree");
  tkhala = new TChain("SimulatedTree");
  gfatima = new TGraphErrors();
  gfatima->SetMarkerSize(1.3);
  gfatima->SetMarkerStyle(20);
  gfatima->SetMarkerColor(2);
  gfatima->SetLineColor(2);
  gkhala = (TGraphErrors*)gfatima->Clone("gkhala");
  gkhala->SetMarkerStyle(22);
  gkhala->SetMarkerColor(4);
  gkhala->SetLineColor(4);
  gidaten = (TGraphErrors*)gfatima->Clone("gidaten");
  gidaten->SetMarkerStyle(21);
  gidaten->SetMarkerColor(1);
  gidaten->SetLineColor(1);
  
  h152eu = new  TH1D("h152Eu", "", 1500, 0, 1500);
  h152eu_gg_122 = new  TH1D("h152Eu_gg_122", "", 1500, 0, 1500);
  h152eu_gg_344 = new  TH1D("h152Eu_gg_344", "", 1500, 0, 1500);

  for(int i = 0; i < 24; i++){
    tfatima->Reset();
    tfatima->Add(Form("idaten_%dkeV.root", ENERGIES[i]));
    tkhala->Reset();
    tkhala->Add(Form("idaten_%dkeV.root", ENERGIES[i]));
    
    hfatima[i] = new TH1D(Form("hfatima%d", ENERGIES[i]), "", 4500, 0, 4500);
    hkhala[i] = new TH1D(Form("hkhala%d", ENERGIES[i]), "", 4500, 0, 4500);
    
    hfatima[i]->Rebin(REBIN[i]); 
    hkhala[i]->Rebin(REBIN[i]);
    tfatima->Project(Form("hfatima%d", ENERGIES[i]), "Fatima.fFATIMA_LaBr3_E_Energy*1000");
    tkhala->Project(Form("hkhala%d", ENERGIES[i]), "Khala.fKHALA_LaBr3_E_Energy*1000");
    hidaten[i] = (TH1D*)hfatima[i]->Clone(Form("hidaten%d", ENERGIES[i]));
    hidaten[i]->Add(hkhala[i]);
    ffatima[i] = new TF1(Form("ffatima%d", ENERGIES[i]), "gaus", ENERGIES[i]-dENERGIES[i]*2/3, ENERGIES[i]+dENERGIES[i]);
    ffatima[i]->FixParameter(1, ENERGIES[i]);
    ffatima[i]->SetParameter(0, hfatima[i]->GetMaximum());
    ffatima[i]->SetParameter(2, dENERGIES[i]);
    fkhala[i] = (TF1*)ffatima[i]->Clone(Form("fkhala%d", ENERGIES[i]));
    fidaten[i] = (TF1*)ffatima[i]->Clone(Form("fidaten%d", ENERGIES[i]));
    
    hfatima[i]->Fit(ffatima[i], "QN0R");
    hkhala[i]->Fit(fkhala[i], "QN0R");
    hidaten[i]->Fit(fidaten[i], "QN0R");
    gfatima->SetPoint(i, ENERGIES[i], ffatima[i]->Integral(ENERGIES[i]*0.5, ENERGIES[i]*1.5)/REBIN[i]/100000);
    gkhala->SetPoint(i, ENERGIES[i], fkhala[i]->Integral(ENERGIES[i]*0.5, ENERGIES[i]*1.5)/REBIN[i]/100000);
    gidaten->SetPoint(i, ENERGIES[i], fidaten[i]->Integral(ENERGIES[i]*0.5, ENERGIES[i]*1.5)/REBIN[i]/100000);
    
    if (i==0){
      cc->cd(1)->SetLogy(1);
      hfatima[i]->Draw();
      hfatima[i]->GetXaxis()->SetTitle("Energy (keV)");
      hfatima[i]->GetYaxis()->SetTitle("Counts / 5 keV");
      ffatima[i]->Draw("same");
      cc->cd(2)->SetLogy(1);
      hkhala[i]->Draw();
      hkhala[i]->GetXaxis()->SetTitle("Energy (keV)");
      hkhala[i]->GetYaxis()->SetTitle("Counts / 5 keV");
      fkhala[i]->Draw("same");
      cc->cd(3)->SetLogy(1);
      hidaten[i]->Draw();
      hidaten[i]->GetXaxis()->SetTitle("Energy (keV)");
      hidaten[i]->GetYaxis()->SetTitle("Counts / 5 keV");
      fidaten[i]->Draw("same");
      
    }
    else{
      cc->cd(1);
      hfatima[i]->Draw("same");
      ffatima[i]->Draw("same");
      cc->cd(2);
      hkhala[i]->Draw("same");
      fkhala[i]->Draw("same");
      cc->cd(3);
      hidaten[i]->Draw("same");
      fidaten[i]->Draw("same");
      
    }
    
  }
		 
  TCanvas* cg = new TCanvas("cg", "cg", 1200, 800);
  cg->cd()->SetGridx(1);
  cg->cd()->SetGridy(1);
  gidaten->Draw("alp");
  gidaten->GetYaxis()->SetRangeUser(0, 0.21);
  gidaten->GetXaxis()->SetLimits(0, 4100);
  gidaten->GetXaxis()->SetTitle("Energy (keV)");
  gidaten->GetYaxis()->SetTitle("Efficiency");
  gkhala->Draw("lp");
  gfatima->Draw("lp");
  gidaten->GetXaxis()->CenterTitle();
  gidaten->GetYaxis()->CenterTitle();

  

  int i =0;
  //  fReader.SetLocalEntry(entry);
  
  while(fReader.Next()){            // new addition for gamma-gamma from Rob 
    i++;
    if((i % 100000)==0)cout << i << endl;
    for(int n = 0; n < Fatima->GetFatimaLaBr3EMult();n++){
      h152eu->Fill(Fatima->GetFatimaLaBr3EEnergy(n)*1000);
      for(int m = n+1; m < Fatima->GetFatimaLaBr3EMult(); m++){  
      	if (Fatima->GetFatimaLaBr3EEnergy(m)>EGATE1-EWIND1 && Fatima->GetFatimaLaBr3EEnergy(m)<EGATE1+EWIND1)
      	  h152eu_gg_122->Fill(Fatima->GetFatimaLaBr3EEnergy(n)*1000);
      	else if (Fatima->GetFatimaLaBr3EEnergy(m)>EGATE2-EWIND2 && Fatima->GetFatimaLaBr3EEnergy(m)<EGATE2+EWIND2)
      	  h152eu_gg_344->Fill(Fatima->GetFatimaLaBr3EEnergy(n)*1000);
	if (Fatima->GetFatimaLaBr3EEnergy(n)>EGATE1-EWIND1 && Fatima->GetFatimaLaBr3EEnergy(n)<EGATE1+EWIND1)
      	  h152eu_gg_122->Fill(Fatima->GetFatimaLaBr3EEnergy(m)*1000);
	else if (Fatima->GetFatimaLaBr3EEnergy(n)>EGATE2-EWIND2 && Fatima->GetFatimaLaBr3EEnergy(n)<EGATE2+EWIND2)
      	  h152eu_gg_344->Fill(Fatima->GetFatimaLaBr3EEnergy(m)*1000);
      	
	//      	mIdaten->Fill(Fatima->GetFatimaLaBr3EEnergy(n), Fatima->GetFatimaLaBr3EEnergy(m));
      	//	mIdaten->Fill(Fatima->GetFatimaLaBr3EEnergy(m), Fatima->GetFatimaLaBr3EEnergy(n));
      }
    }
    for(int n = 0; n < Khala->GetKhalaLaBr3EMult();n++){
      h152eu->Fill(Khala->GetKhalaLaBr3EEnergy(n)*1000);
      for(int m = n+1; m < Khala->GetKhalaLaBr3EMult(); m++){  
      	if (Khala->GetKhalaLaBr3EEnergy(m)>EGATE1-EWIND1 && Khala->GetKhalaLaBr3EEnergy(m)<EGATE1+EWIND1)
      	  h152eu_gg_122->Fill(Khala->GetKhalaLaBr3EEnergy(n)*1000);
      	else if (Khala->GetKhalaLaBr3EEnergy(m)>EGATE2-EWIND2 && Khala->GetKhalaLaBr3EEnergy(m)<EGATE2+EWIND2)
      	  h152eu_gg_344->Fill(Khala->GetKhalaLaBr3EEnergy(n)*1000);
	if (Khala->GetKhalaLaBr3EEnergy(n)>EGATE1-EWIND1 && Khala->GetKhalaLaBr3EEnergy(n)<EGATE1+EWIND1)
      	  h152eu_gg_122->Fill(Khala->GetKhalaLaBr3EEnergy(m)*1000);
      	else if (Khala->GetKhalaLaBr3EEnergy(n)>EGATE2-EWIND2 && Khala->GetKhalaLaBr3EEnergy(n)<EGATE2+EWIND2)
      	  h152eu_gg_344->Fill(Khala->GetKhalaLaBr3EEnergy(m)*1000);
      	
	//      	mIdaten->Fill(Khala->GetKhalaLaBr3EEnergy(n), Khala->GetKhalaLaBr3EEnergy(m));
      	//    	mIdaten->Fill(Khala->GetKhalaLaBr3EEnergy(m), Khala->GetKhalaLaBr3EEnergy(n));
      }
    }
    //    loop through coincidence data for mixed detector types
    for(int n = 0; n < Fatima->GetFatimaLaBr3EMult();n++){
      for(int m = 0; m < Khala->GetKhalaLaBr3EMult(); m++){
    	if (Khala->GetKhalaLaBr3EEnergy(m)>EGATE1-EWIND1 && Khala->GetKhalaLaBr3EEnergy(m)<EGATE1+EWIND1)
    	  h152eu_gg_122->Fill(Fatima->GetFatimaLaBr3EEnergy(n)*1000);
    	else if (Khala->GetKhalaLaBr3EEnergy(m)>EGATE2-EWIND2 && Khala->GetKhalaLaBr3EEnergy(m)<EGATE2+EWIND2)
    	  h152eu_gg_344->Fill(Fatima->GetFatimaLaBr3EEnergy(n)*1000);
	if (Fatima->GetFatimaLaBr3EEnergy(n)>EGATE1-EWIND1 && Fatima->GetFatimaLaBr3EEnergy(n)<EGATE1+EWIND1)
    	  h152eu_gg_122->Fill(Khala->GetKhalaLaBr3EEnergy(m)*1000);
    	else if (Fatima->GetFatimaLaBr3EEnergy(n)>EGATE2-EWIND2 && Fatima->GetFatimaLaBr3EEnergy(n)<EGATE2+EWIND2)
    	  h152eu_gg_344->Fill(Khala->GetKhalaLaBr3EEnergy(m)*1000);
	//	mIdaten->Fill(Fatima->GetFatimaLaBr3EEnergy(n), Khala->GetKhalaLaBr3EEnergy(m));

      }
    }

  }
  TCanvas* c152eu = new TCanvas("c152eu", "c152eu", 1200, 800);
  c152eu->cd()->SetLogy(1);
  h152eu->SetLineColor(1);
  h152eu->Draw("hist");
  h152eu_gg_122->SetLineColor(2);
  h152eu_gg_122->Rebin(5);
  h152eu_gg_122->Draw("hist same");
  h152eu_gg_344->SetLineColor(4);
  h152eu_gg_344->Rebin(10);
  h152eu_gg_344->Draw("hist same");
  double n122_singles = sqrt(2*M_PI)*6.5386*3188.5;
  double e122_singles = n122_singles/0.284/1e6;
  double n344_singles = sqrt(2*M_PI)*9.868*1297.1;
  double e344_singles = n344_singles/0.265/1e6;
  cout<<n122_singles<<" "<<e122_singles<<" "<<n344_singles<<" "<<e344_singles<<endl;
  h152eu->GetXaxis()->SetTitle("Energy (keV)");
  h152eu->GetXaxis()->CenterTitle();

  TLegend* leg152 = new TLegend(0.55, 0.7, 0.9, 0.9);
  leg152->AddEntry(h152eu, "^{152}Eu singles (1 keV/bin)", "l");
  leg152->AddEntry(h152eu_gg_122, "Gated on 122-keV #gamma (5 keV/bin)", "l");
  leg152->AddEntry(h152eu_gg_344, "Gated on 344-keV #gamma (10 keV/bin)", "l");
  
  leg152->Draw();
  c152eu->SaveAs("idaten_152Eu_spectrum.png");
  
  g152eu_122 = new TGraphErrors();
  g152eu_344 = new TGraphErrors();
  for(int i = 0; i < 5; i++){
    f152eu_122[i] = new TF1(Form("f152eu_122%d", i), "gaus(0)+pol1(3)", E152EU_122[i]-50, E152EU_122[i]+50);
    f152eu_122[i]->SetParameter(0, n152EU_122[i]);
    f152eu_122[i]->FixParameter(1, E152EU_122[i]);
    f152eu_122[i]->SetParameter(2, 10);
    f152eu_122[i]->SetParameter(3, b152EU_122[i]);
    h152eu_gg_122->Fit(f152eu_122[i], "QRN0");
    f152eu_122[i]->Draw("same");
    g152eu_122->SetPoint(i, E152EU_122[i], sqrt(2*M_PI)*f152eu_122[i]->GetParameter(2)*f152eu_122[i]->GetParameter(0)/5/n122_singles/(I152EU_122[i]/(21+14.5+13.6+7.5)));
    g152eu_122->SetPointError(i, 0,  g152eu_122->GetY()[i]*f152eu_122[i]->GetParError(0)/f152eu_122[i]->GetParameter(0));
  }
  double n1290 = 0;
  double dn1290 = 0;
  for(int i = 0; i < 3; i++){
    f152eu_344[i] = new TF1(Form("f152eu_344%d", i), "gaus(0)+pol1(3)", E152EU_344[i]-dE152EU_344[i], E152EU_344[i]+dE152EU_344[i]);
    f152eu_344[i]->SetParameter(0, n152EU_344[i]);
    f152eu_344[i]->FixParameter(1, E152EU_344[i]);
    f152eu_344[i]->SetParameter(2, 10);
    f152eu_344[i]->FixParameter(3, b152EU_344[i]);
    if (i > 1)
      f152eu_344[i]->FixParameter(4, 0);
       
    h152eu_gg_344->Fit(f152eu_344[i], "QRN0");
    f152eu_344[i]->Draw("same");
    if (i==2){
      for(int j = 0; j < h152eu_gg_344->GetNbinsX(); j++){
	if (h152eu_gg_344->GetBinCenter(j) > 1250 && h152eu_gg_344->GetBinCenter(j) < 1350)
	  n1290+=h152eu_gg_344->GetBinContent(j);
      }
      dn1290 = sqrt(n1290);
      g152eu_344->SetPoint(i, E152EU_344[i], n1290/n344_singles/(I152EU_344[i]/(2.234+12.942+1.727+1.623)*0.045/0.06));
      g152eu_344->SetPointError(i, 0,  g152eu_344->GetY()[i]*dn1290/n1290);
    }
    else{
      g152eu_344->SetPoint(i, E152EU_344[i], sqrt(2*M_PI)*f152eu_344[i]->GetParameter(2)*f152eu_344[i]->GetParameter(0)/10/n344_singles/(I152EU_344[i]/(2.234+12.942+1.727+1.623)*0.045/0.06));
      g152eu_344->SetPointError(i, 0,  g152eu_344->GetY()[i]*f152eu_344[i]->GetParError(0)/f152eu_344[i]->GetParameter(0));
    }
      
  }
  
  cg->cd();
  g152eu_122->SetMarkerStyle(28);
  g152eu_122->SetMarkerColor(1);
  g152eu_122->SetMarkerSize(1.3);
  g152eu_122->Draw("p");
  g152eu_344->SetMarkerStyle(27);
  g152eu_344->SetMarkerColor(1);
  g152eu_344->SetMarkerSize(1.3);
  g152eu_344->Draw("p");
  TLegend* legend = new TLegend(0.6, 0.6, 0.9, 0.9);
  legend->AddEntry(gidaten, "IDATEN (84 ch)", "lp");
  legend->AddEntry(gfatima, "FATIMA (36 ch)", "lp");
  legend->AddEntry(gkhala, "KHALA (48 ch)", "lp");
  legend->AddEntry(g152eu_122, "^{152}Eu #gamma#gamma on 122 keV", "lp");
  legend->AddEntry(g152eu_344, "^{152}Eu #gamma#gamma on 344 keV", "lp");
  
  legend->Draw();
  
  cg->SaveAs("idaten_152Eu_gg_efficiency.png");
  //  cs->SaveAs("idaten_138La_bgd_response.png");
}
