TChain* tsim;

// time 1D histograms
TH1D* htfatima;
TH1D* htkhala;
TH1D* htidaten;

// energy 1D histograms
TH1D* hefatima;
TH1D* hekhala;
TH1D* heidaten;
TH1D* hege;

// projected energy 1D histograms
TH1D* heidaten_idaten_gated;

// for IDATEN data selection
const double EGATE_MIN = 131;
const double EGATE_MAX = 151;

#include <TTreeReader.h>
#include <TTreeReaderValue.h>
#include <TTreeReaderArray.h>
#include "TFatimaData.h"

TTreeReader fReader;

void drawSingles_idaten_coinc(){
  gStyle->SetOptStat(0);
  tsim = new TChain("SimulatedTree"); 
  tsim->Add("decay_100Sn_50.root"); // specify input file name here
  fReader.SetTree(tsim);
  TTreeReaderValue<TFatimaData> Fatima = {fReader, "Fatima"};
  TTreeReaderValue<TKhalaData> Khala = {fReader, "Khala"};
  
  TCanvas* cc = new TCanvas("cc", "cc", 1600, 800);
  
  cc->Divide(2,1);
  htfatima = new TH1D("htfatima", "", 600, 0, 30000); // time in ns
  htfatima->SetLineColor(1);
  htkhala = (TH1D*)htfatima->Clone("htkhala");

  hefatima = new TH1D("hefatima", "", 440, 0, 2200); // energy in keV
  hefatima->SetLineColor(1);
  hekhala = (TH1D*)hefatima->Clone("hekhala");
  
  heidaten_idaten_gated = (TH1D*)hefatima->Clone("hefatima_idaten_gated");
  heidaten_idaten_gated->SetLineColor(4);
  
  hege = new TH1D("hege", "", 2500, 0, 2500); // HPGe
  hege->SetLineColor(2);

  tsim->Project("htfatima", "Fatima.fFATIMA_LaBr3_T_Time");
  tsim->Project("htkhala", "Khala.fKHALA_LaBr3_T_Time");

  tsim->Project("hefatima", "Fatima.fFATIMA_LaBr3_E_Energy");
  tsim->Project("hekhala", "Khala.fKHALA_LaBr3_E_Energy");
  tsim->Project("hege", "Tigress.fTIG_Ge_Energy");

  while(fReader.Next()){           
    i++;
    if((i % 100000)==0) cout << i << endl;
    for(int n = 0; n < Fatima->GetFatimaLaBr3EMult();n++){
      if (Fatima->GetFatimaLaBr3TTime(n) < TIME_CUTOFF){
	for(int m = n+1; m < Fatima->GetFatimaLaBr3EMult(); m++){
	  if (Fatima->GetFatimaLaBr3TTime(m) < TIME_CUTOFF){
	    if (fabs(Fatima->GetFatimaLaBr3EEnergy(m)-EGATE_START) < EWIND_START // start gamma in index m
		&& fabs(Fatima->GetFatimaLaBr3EEnergy(n)-EGATE_STOP) < EWIND_STOP) // stop gamma in index n
	      hdt_idaten->Fill(Fatima->GetFatimaLaBr3TTime(n)-Fatima->GetFatimaLaBr3TTime(m));
	    else if (fabs(Fatima->GetFatimaLaBr3EEnergy(n)-EGATE_START) < EWIND_START   // start gamma in index n
		     && fabs(Fatima->GetFatimaLaBr3EEnergy(m)-EGATE_STOP) < EWIND_STOP) // stop gamma in index m 
	      hdt_idaten->Fill(Fatima->GetFatimaLaBr3TTime(m)-Fatima->GetFatimaLaBr3TTime(n));
	  }
	}
      }
    }
    for(int n = 0; n < Khala->GetKhalaLaBr3EMult();n++){
      if (Khala->GetKhalaLaBr3TTime(n) < TIME_CUTOFF){
	for(int m = n+1; m < Khala->GetKhalaLaBr3EMult(); m++){
	  if (Khala->GetKhalaLaBr3TTime(m) < TIME_CUTOFF){
	    if (fabs(Khala->GetKhalaLaBr3EEnergy(m)-EGATE_START) < EWIND_START // start gamma in index m
		&& fabs(Khala->GetKhalaLaBr3EEnergy(n)-EGATE_STOP) < EWIND_STOP) // stop gamma in index n
	      hdt_idaten->Fill(Khala->GetKhalaLaBr3TTime(n)-Khala->GetKhalaLaBr3TTime(m));
	    else if (fabs(Khala->GetKhalaLaBr3EEnergy(n)-EGATE_START) < EWIND_START   // start gamma in index n
		     && fabs(Khala->GetKhalaLaBr3EEnergy(m)-EGATE_STOP) < EWIND_STOP) // stop gamma in index m
	      hdt_idaten->Fill(Khala->GetKhalaLaBr3TTime(m)-Khala->GetKhalaLaBr3TTime(n));
	  }
	}
      }
    }
    //    loop through coincidence data for mixed detector types
    for(int n = 0; n < Fatima->GetFatimaLaBr3EMult();n++){
      if (Fatima->GetFatimaLaBr3TTime(n) < TIME_CUTOFF){
	for(int m = 0; m < Khala->GetKhalaLaBr3EMult(); m++){
	  if (Khala->GetKhalaLaBr3TTime(m) < TIME_CUTOFF){
	    if (fabs(Khala->GetKhalaLaBr3EEnergy(m)-EGATE_START) < EWIND_START // start gamma in index m for khala
		&& fabs(Fatima->GetFatimaLaBr3EEnergy(n)-EGATE_STOP) < EWIND_STOP) // stop gamma in index n for fatima
	      hdt_idaten->Fill(Fatima->GetFatimaLaBr3TTime(n)-Khala->GetKhalaLaBr3TTime(m));
	    else if (fabs(Fatima->GetFatimaLaBr3EEnergy(n)-EGATE_START) < EWIND_START   // start gamma in index n for fatima
		     && fabs(Khala->GetKhalaLaBr3EEnergy(m)-EGATE_STOP) < EWIND_STOP) // stop gamma in index m for khala
	      hdt_idaten->Fill(Khala->GetKhalaLaBr3TTime(m)-Fatima->GetFatimaLaBr3TTime(n));
	  }
	}
      }
    }
    
  }

  
  htidaten = (TH1D*)htfatima->Clone("htidaten");
  htidaten->Add(htkhala);
  htidaten->GetXaxis()->SetTitle("Time (ns)");
  htidaten->GetYaxis()->SetTitle("Counts / 50 ns");

  heidaten = (TH1D*)hefatima->Clone("heidaten");
  heidaten->Add(hekhala);
  heidaten->GetXaxis()->SetTitle("Energy (keV)");
  heidaten->GetYaxis()->SetTitle("Counts / 5 keV");

  //  cc->cd(1)->SetLogy(1); // energy
  cc->cd(1)->SetLeftMargin(0.12);
  
  heidaten->Draw("hist");
  //  heidaten->GetYaxis()->SetRangeUser(0.5, 3e4);
  hege->Draw("same");
  heidaten_ge_gated->Rebin(2);
  heidaten_ge_gated->Draw("same");

  TLegend* legend = new TLegend(0.3, 0.7, 0.9, 0.9);
  legend->AddEntry(heidaten, "IDATEN singles", "l");
  legend->AddEntry(hege, "HPGe singles", "l");
  legend->AddEntry(heidaten_ge_gated, "IDATEN, gated on HPGe 106-keV #gamma", "l");
  legend->Draw();
  
  cc->cd(2)->SetLogy(1); // time
  htidaten->Draw("hist");
  TF1* fhalf = new TF1("fhalf", "[0]*0.5**(x/[1])+[2]", 0, 30000);
  fhalf->SetParameters(0, 1000);
  fhalf->SetParameters(1, 2100);
  fhalf->SetParameters(2, 40);
  htidaten->Fit(fhalf, "QRN0");
  fhalf->Draw("same");


  TLatex* latex = new TLatex();
  latex->SetTextSize(0.04);
  latex->DrawLatex(6000, 1000, "^{96}Pd");
  latex->DrawLatex(6000, 600, Form("T_{1/2}(8^{+}) = %.2f #pm %.2f #mus (Sim.)", fhalf->GetParameter(1)/1000,  fhalf->GetParError(1)/1000));
  latex->DrawLatex(6000, 400, Form("T_{1/2}(8^{+}) = %.1f #mus (Geant4 ENSDF)", 2.1));
  
  cc->SaveAs("idaten_hpge_100Sn_energy_time_hists.png");
 

}
